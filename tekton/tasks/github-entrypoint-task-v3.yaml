apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-entrypoint-task
spec:
  params:
    - name: GITHUB_EVENT
      description: GitHub event
      type: string

    - name: GITHUB_PAYLOAD
      description: GitHub payload from Webhook
      type: string

    - name: GITHUB_FILE_EVENT
      description: GitHub event file
      type: string
      default: github-event.conf

      #- name: GITHUB_FILE_BRANCH
      #  description: GitHub branch file
      #  type: string
      #  default: github-branch.conf

      #- name: GITHUB_FILE_URL_REPO
      #  description: GitHub url rep file
      #  type: string
      #  default: github-url-repo.conf

    - name: GITHUB_FILE_PAYLOAD
      description: GitHub payload file
      type: string
      default: github-payload.conf

    - name: GITHUB_FILE_WEBHOOK_PARAMS
      description: GitHub webhook params file
      type: string
      default: github-webhook-params.conf

  workspaces:
    - name: github

  volumes:
    - name: "pipelines-types"
      configMap:
        name: "pipelines-types"

  steps:
    - name: create-github-config-files
      image: centos:8
      script: |
        #! /usr/bin/env bash
        
        set -e

        githubEvent='$(params.GITHUB_EVENT)'
        githubPayload='$(params.GITHUB_PAYLOAD)'

        if [ -z "${githubEvent}" ]; then
           echo "[ERROR] Unable to find github event"
           exit 1
        fi

        if [ -z "${githubPayload}" ]; then
           echo "[ERROR] Unable to find github payload"
           exit 1
        fi

        echo "${githubEvent}"   > "$(workspaces.github.path)/$(params.GITHUB_FILE_EVENT)"
        echo "${githubPayload}" > "$(workspaces.github.path)/$(params.GITHUB_FILE_PAYLOAD)"
        
        exit 0

    - name: create-github-webhook-url-params
      image: python:3.8.8-alpine
      script: |
        #! /usr/bin/env python3 

        from urllib.parse import parse_qs

        import urllib.parse as urlparse
        import requests
        import json
        import os
        import sys
        import yaml
        
        #token = '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'
        token        = os.environ.get('GITHUB_TOKEN')
        headers      = {"Authorization": "token {}".format(token)}
        file_payload = "$(workspaces.github.path)/$(params.GITHUB_FILE_PAYLOAD)"
        file_params  = "$(workspaces.github.path)/$(params.GITHUB_FILE_WEBHOOK_PARAMS)"
        payload      = None
        hooks        = []
        params       = []
        
        if token == None:
           print("[ERROR] Unable to find GitHub token")
           sys.exit(1)
        
        try:
           f = open(file_payload, "r")
           payload = yaml.load(f)
           f.close()
        
           #payload = json.loads(github_payload)
        except Exception as e:
           print("[ERROR] {}".format(e))
           sys.exit(1)
        
        if not 'repository' in payload:
           print("[ERROR] Unable to find 'repository' in payload")
           sys.exit(1)
        
        if not 'hooks_url' in payload['repository']:
           print("[ERROR] Unable to find 'hooks_url' in payload")
           sys.exit(1)
        
        hooks_url = "{}".format(payload['repository']['hooks_url'])
        
        try:
           r    = requests.get(hooks_url, headers=headers)
           data = json.loads(r.content.decode("UTF-8"))
        
           for h in data:
              if 'config' in h and 'url' in h['config']:
                 hooks.append(h['config']['url'])
        except Exception as e:
           print("[ERROR] {}".format(e))
           sys.exit(1)
        
        # Extract params from webhooks
        for u in hooks:
           parsed = urlparse.urlparse(u)
           p      = parsed.query.split('&')
        
           for d in p:
              params.append(d)
        
        try:
           f = open(file_params,"w")
        
           for p in params:
              f.write("{}\n".format(p))
        
           f.close()
        except Exception as e:
           print("[ERROR] {}".format(e))
           sys.exit(1)
        
        sys.exit(0)

      env:
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-webhook-token
              key: githubToken

    - name: run-pipeline
      image: quay.io/jberchez-redhat/tkn:0.15.0-01
      script: |
        #! /usr/bin/env bash

        set -e
        set -o pipefail

        fileWebHookParams=$(workspaces.github.path)/$(params.GITHUB_FILE_WEBHOOK_PARAMS)
        fileTypesProperties="/var/configmap/pipelines-types.properties"

        # Get type
        if [ ! -s ${fileWebHookParams} ]; then
           echo "[ERROR] File ${fileWebHookParams} not found or empty"
           exit 1
        fi

        if ! grep -Eiq "type[[:space:]]*=.+" ${fileWebHookParams}; then
           echo "[ERROR] type parameter not found in ${fileWebHookParams}"
           exit 1
        fi

        type="$(grep -Ei "type[[:space:]]*=.+" ${fileWebHookParams} | sed -r 's#[[:space:]]+##g' | cut -d'=' -f2)"

        if [ -z "${type}" ]; then
           echo "[ERROR] Unable to find type in WebHook params"
           exit 1
        fi

        if ! grep -Eiq "${type}[[:space:]]*=.+" ${fileTypesProperties}; then
           echo "[ERROR] type \"${type}\" not found in ${fileTypesProperties}"
           exit 1
        fi

        pipeline="$(grep -Ei "${type}[[:space:]]*=.+" ${fileTypesProperties} | sed -r 's#[[:space:]]+##g' | cut -d'=' -f2)"

        Voy, listar los pipelines para ver si existe y ejecutarlo

        exit 0

      volumeMounts:
        - name: "pipelines-types"
          mountPath: /var/configmap
