apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-entrypoint-task
spec:
  params:
    - name: GITHUB_EVENT
      description: GitHub event
      type: string

    - name: GITHUB_PAYLOAD
      description: GitHub payload from Webhook
      type: string

    - name: GITHUB_FILE_PAYLOAD
      description: GitHub payload file
      type: string
      default: github-payload.conf

  workspaces:
    - name: github

  steps:
    - name: run-pipeline
      #image: python:3.8.8-alpine
      image: quay.io/jberchez-redhat/custom-utils:v1.0
      script: |
        #! /usr/bin/env python3 

        from datetime import datetime
        import urllib.parse as urlparse
        import sys
        import json
        import subprocess

        # Name pipeline to run
        pipeline         = ""

        # GitHub payload
        payload          = {}

        # Data from webhook request url
        custom_data      = {}

        # Get GitHub payload
        payload_str      = "{}".format('$(params.GITHUB_PAYLOAD)')

        if len(payload_str) == 0:
          print("[ERROR]: GitHub payload empty")
          sys.exit(1)

        payload = json.loads(payload_str)

        # Check if we have github_webhook_request_url key
        # Note: This field es supplied in tekton trigger EventListener
        if not 'github_webhook_request_url' in payload:
          print("[ERROR] Unable to find key 'github_webhook_request_url' in payload")
          sys.exit(1)

        # Parse GitHub request url
        parsed = urlparse.urlparse(payload['github_webhook_request_url'])
        p      = parsed.query.split('&')
        
        for i in p:
           i = i.replace(" ", "")
           d = i.split("=")

           key = "{}".format(d[0])
           val = "{}".format(d[1])

           if len(key) == 0:
             print("[ERROR] Unable to find a key in webhook URL parameters")
             sys.exit(1)
           elif len(val) == 0:
             print("[ERROR] Unable to find a value in key \"{}\" in webhook URL parameters".format(key))
             sys.exit(1)

           key = key.upper()
           val = val.lower()

           custom_data[key] = val

        if len(custom_data) == 0:
           print("[ERROR] Unable to find data in webhook URL parameters")
           sys.exit(1)

        # Check if "TYPE" key exists
        # Note: TYPE is the key to know the pipeline to run
        if not 'TYPE' in custom_data:
          print("[ERROR] Unable to find key 'TYPE' in Webhook URL")
          sys.exit(1)

        # Add custom_data to payload
        payload['custom_data'] = custom_data

        # Add github_event_got key with the github event we got
        payload['github_event_got'] = "{}".format('$(params.GITHUB_EVENT)')

        # Check TYPE to run the right pipeline
        if custom_data['TYPE'] == "microservice":
           pipeline = "pipeline-microservice"
        else:
          print("[ERROR] Unknown TYPE: {}".format(custom_data['TYPE']))
          sys.exit(1)

        now       = datetime.now()
        date_time = now.strftime("%m-%d-%Y_%H-%M-%S")

        params    = []

        # Run the pipeline
        # Note: Run the pipeline with the params got in custom_data
        #cmd = "tkn pipeline start {} --showlog --use-param-defaults --prefix-name {}-".format(pipeline, date_time)
        #cmd = "tkn pipeline start {} --showlog --use-param-defaults --prefix-name {} --param ".format(pipeline, date_time)
        cmd = "tkn pipeline start {} --showlog --use-param-defaults --prefix-name {}".format(pipeline, date_time)

        # Add payload as param
        params.append("payload=\"{}\"".format(payload))

        # Get custom_data
        for k, v in custom_data.items(): 
           #cmd += " --param {}=\"{}\",".format(k,v)
           params.append("{}=\"{}\"".format(k,v))

        for p in params:
           cmd += " --param {}".format(p)
        
        print(cmd)

        sys.exit(0)
